Installations:
    1. Install VS Code, the light version of Visual Studio IDE
        https://code.visualstudio.com/
        https://code.visualstudio.com/docs/?dv=win
    2. Install nvm-windows
        download and install nvm-setup.exe
            https://github.com/coreybutler/nvm-windows
            https://github.com/coreybutler/nvm-windows/releases/tag/1.1.9
            nvm-setup.exe
        check version
            > nvm --version
            Running version 1.1.9.
    3. Install node and npm
        Install node and npm latest stable version
           > nvm install "lts"
                Downloading node.js version 16.17.0 (64-bit)...
                Installation complete. If you want to use this version, type
                nvm use 16.17.0
           > nvm list
                 16.17.0
        Choose version to use with Superuser Terminal
           > nvm use 16.17.0
                exit status 1: Zugriff verweigert
           > nvm use 16.17.0
            Now using node v16.17.0 (64-bit)
           > node --version
                v16.17.0
           > npm --version
                8.15.0

New Github repository:
    1. Go to Github repositories page
        https://github.com/RolandBenz?tab=repositories
        1.1 click New
            - Repository name: nodejs-stuff
            - Check Add a Readme file
        1.2 Click Create repository
    2. Go to new Github repository nodejs-stuff
        https://github.com/RolandBenz/nodejs-stuff
        2.1 click Code
            - copy Https: https://github.com/RolandBenz/nodejs-stuff.git
    3. Clone new repository nodejs-stuff
        1.1 Make folder
            C:\Users\41792\Documents\5) More-Code\AAA_GitHub-remote
        1.2 Open terminal and clone repository
            AAA_GitHub-remote> git clone "https://github.com/RolandBenz/nodejs-stuff.git"
                Cloning into 'nodejs-stuff'...
                remote: Enumerating objects: 3, done.
                remote: Counting objects: 100% (3/3), done.
                remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
                Receiving objects: 100% (3/3), done.

Tutorials:
    1.1 Simple Hello-World App; App folder: Hello;
        Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
    1.2 A simple Express Application; App folder: myExpressApp;
        Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
    1.3 Require explained; App folder: Require;
        Tutorial from: https://nodejs.org/en/knowledge/getting-started/what-is-require/
    1.4 Show Html in Browser and VScode Browser Extension Live Preview; App folder: Getting Started;
        Tutorial from: https://code.visualstudio.com/docs/introvideos/basics
        Example Code from: https://www.w3schools.com/bootstrap4/bootstrap_navbar.asp
    1.5 Show Image with Node Server; App folder: ShowImg;
        Tutorial from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
    1.6 Show Image with Express Server; App folder: ExpressShowImg;
        Tutorial from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
    1.7 Show Html and Images with Node Server; App folder: BootstrapFotos
        Server Code from: https://www.pabbly.com/tutorials/node-js-http-module-serving-static-files-html-css-images/
        Html Code from: https://www.w3schools.com/bootstrap/bootstrap_images.asp

1.1 Simple Hello-World App
    App folder: Hello
    Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
        1. Make a file Hello/app.js
            Nodejs_Apps/Hello> nano app.js
                var msg = 'Hello World';
                console.log(msg);
        2. Run file
            Nodejs_Apps/Hello> app.js
                Hello World
1.2 A simple Express Application
    App folder: myExpressApp
    Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
    Recommended reading: https://nodejs.org/api/
    Recommended reading: http://expressjs.com/en/api.html
        1. Install Express globally
            The generated Express application has a package.json file
            which includes a start script to run node ./bin/www
                Nodejs_Apps> npm install -g express-generator
                    Output
                        npm WARN deprecated mkdirp@0.5.1: Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x.
                        (Note that the API surface has changed to use Promises in 1.x.)
                        changed 10 packages, and audited 12 packages in 1s
                        3 vulnerabilities (1 moderate, 2 critical)
                        To address all issues (including breaking changes), run:
                          npm audit fix --force
                        Run `npm audit` for details.
                Nodejs_Apps> express --version
                    4.16.1
                Nodejs_Apps> npm audit
                    Output
                        npm ERR! code ENOLOCK
                        npm ERR! audit This command requires an existing lockfile.
                        npm ERR! audit Try creating one first with: npm i --package-lock-only
                        npm ERR! audit Original error: loadVirtual requires existing shrinkwrap file

                        npm ERR! A complete log of this run can be found in:
                        npm ERR!     C:\Users\41792\AppData\Local\npm-cache\_logs\2022-08-16T18_42_39_902Z-debug-0.log
        2. Create App myExpressApp
            1. The --view pug parameters tell the generator to use the pug template engine.
               The command creates some folders and some files listed as output
                Nodejs_Apps/myExpressApp> express myExpressApp --view pug
                    Output
                       create : myExpressApp\
                       create : myExpressApp\public\
                       create : myExpressApp\public\javascripts\
                       create : myExpressApp\public\images\
                       create : myExpressApp\public\stylesheets\
                       create : myExpressApp\public\stylesheets\style.css
                       create : myExpressApp\routes\
                       create : myExpressApp\routes\index.js
                       create : myExpressApp\routes\users.js
                       create : myExpressApp\views\
                       create : myExpressApp\views\error.pug
                       create : myExpressApp\views\index.pug
                       create : myExpressApp\views\layout.pug
                       create : myExpressApp\app.js
                       create : myExpressApp\package.json
                       create : myExpressApp\bin\
                       create : myExpressApp\bin\www
                       change directory:
                         > cd myExpressApp
                       install dependencies:
                         > npm install
                       run the app:
                         > SET DEBUG=myexpressapp:* & npm start
        3. Install dependencies
            1. This adds the folder node_modules
                Nodejs_Apps/myExpressApp> npm install
                    Output
                        npm WARN deprecated core-js@2.6.12: core-js@<3.23.3 is no longer maintained
                        and not recommended for usage due to the number of issues.
                        Because of the V8 engine whims, feature detection in old core-js versions could cause
                        a slowdown up to 100x even if nothing is polyfilled. Some versions have web compatibility issues.
                        Please, upgrade your dependencies to the actual version of core-js.
                        added 124 packages, and audited 125 packages in 16s
                        8 packages are looking for funding
                          run `npm fund` for details
                        4 vulnerabilities (2 low, 2 high)
                        To address issues that do not require attention, run:
                          npm audit fix
                        To address all issues, run:
                          npm audit fix --force
                        Run `npm audit` for details.
                 Nodejs_Apps/myExpressApp> npm audit fix --force
                    Output
                        npm WARN using --force Recommended protections disabled.
                        npm WARN audit Updating pug to 2.0.4, which is outside your stated dependency range.
                        removed 3 packages, changed 8 packages, and audited 122 packages in 8s
                        8 packages are looking for funding
                          run `npm fund` for details
                        # npm audit report
                        pug  <3.0.1
                        Severity: high
                        Remote code execution via the `pretty` option. - https://github.com/advisories/GHSA-p493-635q-r6gr
                        fix available via `npm audit fix --force`
                        Will install pug@3.0.2, which is a breaking change
                        node_modules/pug
                        1 high severity vulnerability
                        To address all issues (including breaking changes), run:
                          npm audit fix --force
                Nodejs_Apps/myExpressApp> npm audit fix --force
                    Output
                        npm WARN using --force Recommended protections disabled.
                        npm WARN audit Updating pug to 3.0.2, which is a SemVer major change.
                        added 6 packages, removed 30 packages, changed 19 packages, and audited 98 packages in 6s
                        8 packages are looking for funding
                          run `npm fund` for details
                        found 0 vulnerabilities
        4. Start node.js server
            1. The generated Express application has a package.json file
               which includes a start script to run 'node ./bin/www'
               The Node.js web server will start and you can browse to http://localhost:3000 to see the running application.
                    Nodejs_Apps/myExpressApps> npm start
                            > myexpressapp@0.0.0 start
                            > node ./bin/www
            2. Open Browser
                 URL: http://localhost:3000
                    Output
                        Express
                        Welcome to Express
        5. Stop node.js server
            1. In VScode open Terminal and close the node terminal
            2. Close Browser tab

1.3 Require explained
    App folder: Require
    Tutorial from: https://nodejs.org/en/knowledge/getting-started/what-is-require/
    Node.js follows the CommonJS module system,
    and the builtin require function is the easiest way to include modules that exist in separate files.
    The basic functionality of require is that it reads a JavaScript file, executes the file,
    and then proceeds to return the exports object.
        1. Make file example.js
            console.log("evaluating example.js");
            var invisible = function () {
              console.log("invisible");
            }
            exports.message = "hi";
            exports.say = function () {
              console.log(exports.message);
            }
        2. Run file in Node Terminal:
            Nodejs_App/Examples> node
                > require('./example.js')
                    evaluating example.js
                    { message: 'hi', say: [Function (anonymous)] }
                > require('./example.js').message = "hey"
                    'hey'
                > require('./example.js')
                    { message: 'hey', say: [Function (anonymous)] }


1.4 Show Html in Browser and VScode Browser Extension Live Preview
    App folder: Getting Started
    Tutorial from: https://code.visualstudio.com/docs/introvideos/basics
    Example Code from: https://www.w3schools.com/bootstrap4/bootstrap_navbar.asp
    Server Code from: https://stackoverflow.com/questions/35995273/how-to-run-html-file-using-node-js
        1. Make html Bootstrap file index.html
                <!DOCTYPE html>
                <html lang="en">
                <head>
                  <title>Bootstrap Example</title>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1">
                  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css">
                  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.slim.min.js"></script>
                  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
                  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js"></script>
                </head>
                <body>
                <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
                  <!-- Brand/logo -->
                  <a class="navbar-brand" href="#">Logo</a>
                  <!-- Links -->
                  <ul class="navbar-nav">
                    <li class="nav-item">
                      <a class="nav-link" href="#">Link 1</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="#">Link 2</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="#">Link 3</a>
                    </li>
                  </ul>
                </nav>
                <div class="container-fluid">
                  <h3>Brand / Logo</h3>
                  <p>The .navbar-brand class is used to highlight the brand/logo/project name of your page.</p>
                </div>
                </body>
                </html>
        2. Run file in Browser
                Nodejs_Apps\GettingStarted> .\index.html
        3. Run file in Browser-Extensions
                RH Click on html file: Vorschau anzeigen
                or
                RH Click on html file: Open with Edge
        4. Run file with Node
                1. Create file Nodejs_Apps/GettingStarted/appServer.js
                    var http = require('http');
                    var fs = require('fs');
                    const PORT=8080;
                    fs.readFile('./index.html', function (err, html) {
                        if (err) throw err;
                        http.createServer(function(request, response) {
                            response.writeHeader(200, {"Content-Type": "text/html"});
                            response.write(html);
                            response.end();
                        }).listen(PORT);
                    });
                2. Run Servers in Node Terminal
                    Nodejs_Apps\GettingStarted> node .\appServer.js

1.5 Show Image with Node Server
        App folder: ShowImg
        Tutorial from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
        Server Code from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
            0. Store foto in images/lights.jpg
            1. Make html Bootstrap file index.html
                   <!DOCTYPE html>
                   <html>
                    <head>
                        <title>Page Title</title>
                    </head>
                    <body>
                        <h1>This is a Heading</h1>
                        <p>This is a paragraph.</p>
                    </body>
                   </html>
            2.  Make a server file appServer1.js
                    // Requiring modules
                    const http = require("http");
                    const fs = require("fs");
                    const path = require("path");
                    const url = require("url");
                    // Creating server to accept request
                    http.createServer((req, res) => {
                        // Parsing the URL
                        var request = url.parse(req.url, true);
                        // Extracting the path of file
                        var action = request.pathname;
                        // Path Refinements
                        var filePath = path.join(__dirname,
                                action).split("%20").join(" ");
                        // Checking if the path exists
                        fs.exists(filePath, function (exists) {
                            if (!exists) {
                                res.writeHead(404, {
                                    "Content-Type": "text/plain" });
                                res.end("404 Not Found, Computer says!");
                                return;
                            }
                            // Extracting file extension
                            var ext = path.extname(action);
                            // Setting default Content-Type
                            var contentType = "text/plain";
                            // Checking if the extension of
                            // image is '.png'
                            if (ext === ".png") {
                                contentType = "image/png";
                            }
                            else if (ext === ".jpg"){
                                contentType = "image/jpg";
                            }
                            // Setting the headers
                            res.writeHead(200, {
                                "Content-Type": contentType });
                            // Reading the file
                            fs.readFile(filePath,
                                function (err, content) {
                                    // Serving the image
                                    res.end(content);
                                });
                        });
                    })
                    // Listening to the PORT: 3000
                    .listen(3000, "127.0.0.1");
            3. Run Servers in Node Terminal
                Nodejs_Apps\GettingStarted> node .\appServer1.js
            4. Request image in Browser
                http://localhost:3000/images/lights.jpg

1.6 Show Image with Express Server
        App folder: ExpressShowImg
        Tutorial from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
        Server Code from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
            0. Store foto in:
                images/lights.jpg
                public/lights_p.jpg
                public/images/lights_pi.jpg
                static/lights_s.jpg
                static/images/lights_si.jpg
            1. Make html Bootstrap file index.html
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Page Title</title>
                    </head>
                    <body>
                        <h1>This is a Heading</h1>
                        <p>This is a paragraph.</p>
                    </body>
                    </html>
            2.  Make a server file appServer2.js
                    // Requiring module
                    const express = require('express');
                    // Creating express object
                    const app = express();
                    // Defining port number
                    const PORT = 3000;
                    // Function to serve all static files
                    // app.use(path, callback) # mount callback at path
                    // url with empty path or with any subpath delivers static files inside public directory.
                    app.use(express.static('public'));
                    // url with empty path or with any subpath delivers static files inside static directory.
                    app.use(express.static('static'));
                    // Also express.static() with option = express.static('images') can be used to serve static files.
                    // url with path /images_ delivers static files anywhere inside images directory
                    app.use('/images_', express.static('images'));
                    // url with path /blabla/bla delivers static files anywhere inside images directory
                    app.use('/blabla/bla', express.static('images'));
                    // Server setup
                    app.listen(PORT, () => {
                      console.log(`Running server on PORT ${PORT}...`);
                    })
            3. Install Express Module
                    Nodejs_Apps\ExpressShowImg> npm install express
                        Output
                            added 57 packages, and audited 58 packages in 6s
                            7 packages are looking for funding
                              run `npm fund` for details
                            found 0 vulnerabilities
            4. Run Servers in Node Terminal
                Nodejs_Apps\GettingStarted> node .\appServer2.js
            5. Request image in Browser
                URL naming:
                    The most common subdomain is ‘www’ which a general symbol for any resource on the web.
                    https://video.google.co.uk:80/videoplay?docid=-7234293487129834&hl=en#00h02m30s
                    protocol://subdomain.domain.topleveldomain:port/path?query#fragment
                This app.use(express.static('public')) serves:
                    http://localhost:3000/lights_p.jpg
                    http://localhost:3000/images/lights_pi.jpg
                    http://localhost:3000/index.html
                This app.use(express.static('static')) serves:
                    http://localhost:3000/lights_s.jpg
                    http://localhost:3000/images/lights_si.jpg
                This app.use('/images_', express.static('images')) serves:
                    http://localhost:3000/images_/lights.jpg
                This app.use('/blabla/bla', express.static('images')) serves:
                    http://localhost:3000/blabla/bla/lights.jpg


1.7 Show Html and Images with Node Server
    App folder: BootstrapFotos
    Server Code from: https://www.pabbly.com/tutorials/node-js-http-module-serving-static-files-html-css-images/
    Html Code from: https://www.w3schools.com/bootstrap/bootstrap_images.asp
        0. Store images
            public/fjords.jpg
            public/lights.jpg
            public/nature.jpg
        1. Make html Bootstrap file public/index.html
                <!DOCTYPE html>
                <html lang="en">
                <head>
                  <title>Bootstrap Example</title>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1">
                  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
                  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
                  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
                </head>
                <body>
                <div class="container">
                  <h2>Image Gallery</h2>
                  <p>The .thumbnail class can be used to display an image gallery.</p>
                  <p>The .caption class adds proper padding and a dark grey color to text inside thumbnails.</p>
                  <p>Click on the images to enlarge them.</p>
                  <div class="row">
                    <div class="col-md-4">
                      <div class="thumbnail">
                        <a href="lights.jpg" target="_blank">
                          <img src="lights.jpg" alt="Lights" style="width:100%">
                          <div class="caption">
                            <p>Lorem ipsum donec id elit non mi porta gravida at eget metus.</p>
                          </div>
                        </a>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="thumbnail">
                        <a href="nature.jpg" target="_blank">
                          <img src="nature.jpg" alt="Nature" style="width:100%">
                          <div class="caption">
                            <p>Lorem ipsum donec id elit non mi porta gravida at eget metus.</p>
                          </div>
                        </a>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="thumbnail">
                        <a href="fjords.jpg" target="_blank">
                          <img src="fjords.jpg" alt="Fjords" style="width:100%">
                          <div class="caption">
                            <p>Lorem ipsum donec id elit non mi porta gravida at eget metus.</p>
                          </div>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
                </body>
                </html>
        2. Make a server file appServer3.js
                // HTTP Module for Creating Server and Serving Static Files Using Node.js
                // Static Files: HTML, CSS, JS, Images
                // Get Complete Source Code from Pabbly.com
                var http = require('http');
                var fs = require('fs');
                var path = require('path');
                http.createServer(function(req, res){
                    if(req.url === "/"){
                        fs.readFile("./public/index.html", "UTF-8", function(err, html){
                            res.writeHead(200, {"Content-Type": "text/html"});
                            res.end(html);
                        });
                    }else if(req.url.match("\.css$")){
                        var cssPath = path.join(__dirname, 'public', req.url);
                        var fileStream = fs.createReadStream(cssPath, "UTF-8");
                        res.writeHead(200, {"Content-Type": "text/css"});
                        fileStream.pipe(res);
                    }else if(req.url.match("\.jpg$")){
                        var imagePath = path.join(__dirname, 'public', req.url);
                        var fileStream = fs.createReadStream(imagePath);
                        res.writeHead(200, {"Content-Type": "image/png"});
                        fileStream.pipe(res);
                    }else{
                        res.writeHead(404, {"Content-Type": "text/html"});
                        res.end("No Page Found");
                    }
                }).listen(3000);
        3. Run Servers in Node Terminal
                Nodejs_Apps\BootstrapFotos> node .\appServer3.js
        4. Request Website in Browser
                http://localhost:3000/
