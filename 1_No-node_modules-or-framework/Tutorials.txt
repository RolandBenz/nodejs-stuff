Git commit message:
Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial and https://nodejs.org/en/knowledge/getting-started/what-is-require/ and https://code.visualstudio.com/docs/introvideos/basics and https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/ and https://www.pabbly.com/tutorials/node-js-http-module-serving-static-files-html-css-images/ and https://www.w3schools.com/bootstrap/bootstrap_images.asp

Tutorials:
  1.1 Simple Hello-World App; App folder: Hello;
      Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
  1.2 Require explained; App folder: Require;
      Tutorial from: https://nodejs.org/en/knowledge/getting-started/what-is-require/
  1.3 Show Html in Browser and VScode Browser Extension Live Preview; App folder: Getting Started;
      Tutorial from: https://code.visualstudio.com/docs/introvideos/basics
      Example Code from: https://www.w3schools.com/bootstrap4/bootstrap_navbar.asp
  1.4 Show Image with Node Server; App folder: ShowImg;
      Tutorial from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
  1.5 Show Html and Images with Node Server; App folder: BootstrapFotos
      Server Code from: https://www.pabbly.com/tutorials/node-js-http-module-serving-static-files-html-css-images/
      Html Code from: https://www.w3schools.com/bootstrap/bootstrap_images.asp


1.1 Simple Hello-World App
    App folder: Hello
    Tutorial from: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
    1. Make a file Hello/app.js
      1.1 app.js
            var msg = 'Hello World';
            console.log(msg);
    2. Run file
      2.1 Hello> node app.js
          Output
            Hello World


1.2 Require explained
    App folder: Require
    Tutorial from: https://nodejs.org/en/knowledge/getting-started/what-is-require/
    Node.js follows the CommonJS module system,
    and the builtin require function is the easiest way to include modules that exist in separate files.
    The basic functionality of require is that it reads a JavaScript file, executes the file,
    and then proceeds to return the exports object.
    1. Make file module.js
      1.1 module.js
            console.log("evaluating module.js");
            var invisible = function () {
              console.log("invisible");
            }
            exports.message = "hi";
            exports.say = function () {
              console.log(exports.message);
            }
    2. Run the code in Node Terminal
      2.1 Require> node
            > require('./module.js')
                Output
                  evaluating module.js
                  { message: 'hi', say: [Function (anonymous)] }
            > require('./module.js').message = "hey"
                Output
                  'hey'
            > require('./module.js')
                Output
                  { message: 'hey', say: [Function (anonymous)] }
    3. Make file module-1.js
      3.1 module-1.js
            module.exports = function () {
              console.log("hello world")
            }
            require('./module-1.js')() //require itself and run the exports object
    4. Run the code in Node Terminal
      4.1 Require> node
            > require('./module-1.js')
              Output
                hello world
                [Function (anonymous)]


1.3 Show Html in Browser and VScode Browser Extension Live Preview
    App folder: Getting Started
    Tutorial from: https://code.visualstudio.com/docs/introvideos/basics
    Example Code from: https://www.w3schools.com/bootstrap4/bootstrap_navbar.asp
    Server Code from: https://stackoverflow.com/questions/35995273/how-to-run-html-file-using-node-js
    1. Make html Bootstrap file index.html
      1.1 index.html
            Example Code from: https://www.w3schools.com/bootstrap4/bootstrap_navbar.asp
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <title>Bootstrap Example</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <!--JS and CSS inclusion: Bootstrap and JQuery-->
              <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css">
              <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.slim.min.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js"></script>
            </head>
            <body>
              <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
                <!-- Brand/logo -->
                <a class="navbar-brand" href="#">Logo</a>
                <!-- Links -->
                <ul class="navbar-nav">
                  <li class="nav-item">
                    <a class="nav-link" href="#">Link 1</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="#">Link 2</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="#">Link 3</a>
                  </li>
                </ul>
              </nav>
              <div class="container-fluid">
                <h3>Brand / Logo</h3>
                <p>The .navbar-brand class is used to highlight the brand/logo/project name of your page.</p>
              </div>
            </body>
            </html>
    2. Run file from Terminal in Browser
      2.1 GettingStarted-with-VScode> .\index.html
    3. Run file from VSCode-Explorer in its Browser-Extensions
      3.1 RH Click on html file: Show Preview
        or
      3.2 RH Click on html file: Open with Edge
    4. Run file from Terminal with Node
      4.1 appServer.js
            var http = require('http');
            var fs = require('fs');
            const PORT=3000; 
            fs.readFile('./index.html', function (err, html) {
                if (err) throw err;    
                http.createServer(function(request, response) {  
                    response.writeHeader(200, {"Content-Type": "text/html"});  
                    response.write(html);  
                    response.end();  
                }).listen(PORT);
            });
        4.2 Run Server from Terminal
          4.2.1 GettingStarted> node .\appServer.js
        4.3 Show in Browser
          4.3.1 URL http://localhost:3000/
        4.4 Stop Server in Terminal
          4.4.1 Ctrl-c

1.4 Show Image with Node Server
  App folder: ShowImg
  Tutorial from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
  Server Code from: https://www.geeksforgeeks.org/how-to-fetch-images-from-node-js-server/
    0. Store photo in images/lights.jpg
    1. Make html Bootstrap file index.html
      1.1 index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>Page Title</title>
            </head>
            <body>
                <h1>This is a Heading</h1>
                <p>This is a paragraph.</p>
            </body>
            </html>
    2. Make a server file appServer1.js
      2.1 appServer1.js
            // Requiring modules
            const http = require("http");
            const fs = require("fs");
            const path = require("path");
            const url = require("url");
            // Creating server to accept request
            http.createServer((req, res) => {
                // Parsing the URL
                var request = url.parse(req.url, true);
                // Extracting the path of requested file within URL
                var action = request.pathname;
                // Path Refinements, add directory of appServer1.js and replace %20 with space
                var filePath = path.join(__dirname, action).split("%20").join(" ");
                // Checking if the path exists
                // depreciated method fs.exist() replaced with fs.access()
                // https://stackoverflow.com/questions/63984035/node-file-system-fs-exist-strikethrough
                fs.access(filePath, (exists) => {
                  if (!exists) {
                    res.writeHead(404, {
                      "Content-Type": "text/plain",
                    });
                    res.end("404 Not Found, Computer says!");
                    return;
                  }
                  // Extracting file extension
                  var ext = path.extname(action);
                  // Setting default Content-Type
                  var contentType = "text/plain";
                  // Checking if the extension of
                  // image is '.png'
                  if (ext === ".png") {
                    contentType = "image/png";
                  } else if (ext === ".jpg") {
                    contentType = "image/jpg";
                  }
                  // Setting the headers
                  res.writeHead(200, {
                    "Content-Type": contentType,
                  });
                  // Reading the requested file
                  fs.readFile(filePath, function (err, content) {
                    // Serving the image
                    res.end(content);
                  });
                });
              })
              // Listening to the PORT: 3000
              .listen(3000, "127.0.0.1");
    3. Run Servers in Node Terminal
      3.1 ShowImg> node .\appServer1.js
    4. Request image in Browser
      4.1 URL http://localhost:3000/images/lights.jpg


1.5 Show Html and Images with Node Server
  App folder: BootstrapFotos
  Server Code from: https://www.pabbly.com/tutorials/node-js-http-module-serving-static-files-html-css-images/
  Html Code from: https://www.w3schools.com/bootstrap/bootstrap_images.asp
      0. Store images
          public/fjords.jpg
          public/lights.jpg
          public/nature.jpg
          bublic/butterfly.png
      1. Make html Bootstrap file public/index.html
        1.1 index.html
              <!DOCTYPE html>
              <html lang="en">
              <head>
                <title>Bootstrap Example</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <!--JS and CSS inclusion: Bootstrap and JQuery-->
                <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
                <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
                <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
              </head>
              <body>
              <div class="container">
                <h2>Image Gallery</h2>
                <p>The .thumbnail class can be used to display an image gallery.</p>
                <p>The .caption class adds proper padding and a dark grey color to text inside thumbnails.</p>
                <p>Click on the images to enlarge them.</p>
                <div class="row">
                  <div class="col-md-4">
                    <div class="thumbnail">
                      <a href="lights.jpg" target="_blank">
                        <img src="lights.jpg" alt="Lights" style="width:100%">
                        <div class="caption">
                          <p>Lorem ipsum donec id elit non mi porta gravida at eget metus.</p>
                        </div>
                      </a>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="thumbnail">
                      <a href="nature.jpg" target="_blank">
                        <img src="nature.jpg" alt="Nature" style="width:100%">
                        <div class="caption">
                          <p>Lorem ipsum donec id elit non mi porta gravida at eget metus.</p>
                        </div>
                      </a>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="thumbnail">
                      <a href="fjords.jpg" target="_blank">
                        <img src="fjords.jpg" alt="Fjords" style="width:100%">
                        <div class="caption">
                          <p>Lorem ipsum donec id elit non mi porta gravida at eget metus.</p>
                        </div>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              </body>
              </html>
      2. Make a server file appServer3.js
        2.1 appServer3.js
              // HTTP Module for Creating Server and Serving Static Files Using Node.js
              // Static Files: HTML, CSS, JS, Images
              // Get Complete Source Code from Pabbly.com
              var http = require("http");
              var fs = require("fs");
              var path = require("path");
              http
                .createServer(function (req, res) {
                  if (req.url === "/" || req.url === "/index.html") {
                    fs.readFile("./public/index.html", "UTF-8", function (err, html) {
                      res.writeHead(200, { "Content-Type": "text/html" });
                      res.end(html);
                    });
                  } else if (req.url.match(".css$")) {
                    var cssPath = path.join(__dirname, "public", req.url);
                    var fileStream = fs.createReadStream(cssPath, "UTF-8");
                    res.writeHead(200, { "Content-Type": "text/css" });
                    fileStream.pipe(res);
                  } else if (req.url.match(".jpg$|.png$")) {
                    var imagePath = path.join(__dirname, "public", req.url);
                    var fileStream = fs.createReadStream(imagePath);
                    res.writeHead(200, { "Content-Type": "image/png" });
                    fileStream.pipe(res);
                  } else {
                    res.writeHead(404, { "Content-Type": "text/html" });
                    res.end("No Page Found");
                  }
                })
                .listen(3000);
      3. Run Servers in Node Terminal
        3.1 BootstrapFotos> node .\appServer3.js
      4. Request Website in Browser
        4.1 URL http://localhost:3000/
        4.2 URL http://localhost:3000/index.html
        4.2 URL http://localhost:3000/butterfly.png
        4.3 URL http://localhost:3000/nature.jpg
        4.4 URL http://localhost:3000/public/index.html	
                  Output: No Page Found
        4.5 URL http://localhost:3000/public/butterfly.png
                  Server crash: Emitted 'error' event on ReadStream instance at:...
